name: Update Changelog

on:
  push:
    branches:
      - main  # or your default branch name

jobs:
  update-changelog:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 1  # Only fetch the most recent commit

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14'

    - name: Update Changelog
      run: |
        COMMIT_MSG=$(git log -1 --pretty=%B)
        COMMIT_AUTHOR=$(git log -1 --pretty=format:'%an')
        
        # Check if the commit is from the GitHub Action
        if [[ "$COMMIT_AUTHOR" == "GitHub Action" ]] || [[ "$COMMIT_MSG" == "Update changelog" ]]; then
          echo "This commit was made by the GitHub Action. Skipping changelog update."
          exit 0
        fi
        
        COMMIT_HASH=$(git rev-parse HEAD)
        COMMIT_DATE=$(git log -1 --pretty=format:'%ad' --date=iso)
        
        # Extract type and description from commit message
        if [[ $COMMIT_MSG =~ ^(major|feat|fix|docs|style|refactor|perf|test|chore)(\(.+\))?: ]]; then
          TYPE=${BASH_REMATCH[1]}
          DESCRIPTION=${COMMIT_MSG#*: }
        else
          TYPE="other"
          DESCRIPTION=$COMMIT_MSG
        fi
        
        # Determine version bump
        if [[ $TYPE == "major" ]]; then
          VERSION_BUMP="major"
        elif [[ $TYPE == "feat" ]]; then
          VERSION_BUMP="minor"
        elif [[ $TYPE == "fix" ]]; then
          VERSION_BUMP="patch"
        else
          VERSION_BUMP="none"
        fi
        
        # Get the latest version from changelog.json
        if [ -f src/changelog.json ]; then
          LATEST_VERSION=$(jq -r '[.[] | select(.version != "TBD") | .version] | sort_by(split(".") | map(tonumber)) | reverse | .[0]' src/changelog.json)
          if [ "$LATEST_VERSION" == "null" ]; then
            LATEST_VERSION="0.0.0"
          fi
        else
          LATEST_VERSION="0.0.0"
        fi
        
        # Increment version
        IFS='.' read -ra VERSION_PARTS <<< "$LATEST_VERSION"
        MAJOR=${VERSION_PARTS[0]}
        MINOR=${VERSION_PARTS[1]}
        PATCH=${VERSION_PARTS[2]}
        
        if [[ $VERSION_BUMP == "major" ]]; then
          MAJOR=$((MAJOR + 1))
          MINOR=0
          PATCH=0
        elif [[ $VERSION_BUMP == "minor" ]]; then
          MINOR=$((MINOR + 1))
          PATCH=0
        elif [[ $VERSION_BUMP == "patch" ]]; then
          PATCH=$((PATCH + 1))
        fi
        
        NEW_VERSION="$MAJOR.$MINOR.$PATCH"
        
        # Create new changelog entry
        NEW_ENTRY=$(cat << EOF
        {
          "version": "$NEW_VERSION",
          "commitHash": "$COMMIT_HASH",
          "author": "$COMMIT_AUTHOR",
          "date": "$COMMIT_DATE",
          "message": "$DESCRIPTION",
          "type": "$TYPE",
          "versionBump": "$VERSION_BUMP"
        }
        EOF
        )
        
        # Add new entry to changelog.json
        if [ -f src/changelog.json ]; then
          contents=$(jq --argjson new_entry "$NEW_ENTRY" '. + [$new_entry]' src/changelog.json)
          echo "$contents" > src/changelog.json
        else
          echo "[$NEW_ENTRY]" > src/changelog.json
        fi
        
    - name: Commit and push if changed
      run: |
        git config --global user.name 'GitHub Action'
        git config --global user.email 'action@github.com'
        git add src/changelog.json
        git diff --quiet && git diff --staged --quiet || (git commit -m "Update changelog" && git push)
